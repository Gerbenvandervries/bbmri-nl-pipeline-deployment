---
#
# This is a brittle way to figure what the version of the latest EasyBuild release is.
# As we currently don't enforce deployment of a specific version,
# we might as well forget about the version number here
# and just install the latest and greatest...
#
#- name: Fetch which is the latest release of easybuild
#  shell: >-
#    wget https://pypi.python.org/pypi/easybuild -O - |grep title|head -1|awk {'print $2'}
#  register: easybuild_version

#- name: Debug the easybuildversion
#  debug: var=easybuild_version

- name: Create ~/.modulesrc to make sure our global modules.bashrc with Lmod and EasyBuild environment config will be sourced.
  blockinfile:
    dest: "{{ ansible_env.HOME }}/.modulesrc"
    block: |
      export PATH={{ easybuild_software_dir }}/Lua/{{ easybuild_lua_version }}/bin:$PATH;
      export PATH={{ easybuild_software_dir }}/lmod/lmod/libexec:$PATH
      unset MODULEPATH # Make sure Lmod starts with a clean MODULEPATH
      source {{ easybuild_software_dir }}/lmod/lmod/init/bash
      source {{ easybuild_modules_dir }}/modules.bashrc
    marker: "# {mark} ANSIBLE MANAGED BLOCK - lua lmod modules in path"
    insertafter: EOF
    create: yes

- name: Create required directories
  file: dest="{{item}}" state='directory' mode="{{ MODE_DIRS }}" recurse='yes'
  with_items:
    - "{{ easybuild_sources_dir }}/l/Lmod"
    - "{{ easybuild_sources_dir }}/l/Lua"
    - "{{ easybuild_sources_dir }}/e/EasyBuild"
    - "{{ easybuild_software_dir }}/Lua/{{ easybuild_lua_version }}"
    - "{{ easybuild_software_dir }}/EasyBuild/"
    - "{{ easybuild_modules_dir }}/all/EasyBuild"
    - "{{ easybuild_modules_dir }}/tools/EasyBuild"
    - "{{ easybuild_modules_dir }}/.lmod"

#
# Lua.
#
- name: Check if Lua is installed and if yes what version
  #
  # Example output:
  # Lua 5.1.4.7-rtm  Copyright (C) 1994-2008 Lua.org, PUC-Rio
  #
  shell: ". ~/.modulesrc && lua -v"
  args:
    executable: /bin/bash
    warn: no
  environment:
    SOURCE_HPC_ENV: "True"   # Required to source our modules.bashrc in non-interactive shells.
  changed_when: false
  failed_when: false
  check_mode: no
  register: lua_installed_version
- name: Determine if Lua needs to be (re)installed
  set_fact:
    lua_install_from_source: true
  when: 'lua_installed_version|failed or (lua_installed_version.stderr | regex_replace("^.*Lua ([0-9\.]+).*$", "\\1") | version_compare(easybuild_lua_version, operator="!="))'
- name: Report Lua status
  debug:
    msg: 'Will install Lua from source as it is either missing or present in a different version. (Detected {{ lua_installed_version.stderr | regex_replace("^.*Lua ([0-9\.]+).*$", "\\1") }} and need {{ easybuild_lua_version }}.)'
  when: lua_install_from_source|default(false)
- name: Download Lua
  get_url:
    url: "http://sourceforge.net/projects/lmod/files/lua-{{ easybuild_lua_version }}.tar.bz2/download"
    dest: "{{ easybuild_sources_dir }}/l/Lua/lua-{{ easybuild_lua_version }}.tar.bz2"
    mode: "{{ MODE_FILES_REGULAR }}"
    checksum: 'md5:a8d0443fe79fc4e9aaded057d81304cd' # 5.1.4.9
  when: lua_install_from_source|default(false)
- name: Decompress Lua
  unarchive:
    src:  "{{ easybuild_sources_dir }}/l/Lua/lua-{{ easybuild_lua_version }}.tar.bz2"
    dest: "{{ easybuild_sources_dir }}/l/Lua/"
    copy: no
  when: lua_install_from_source|default(false)
- name: Compile and install Lua
  shell: 
    cmd: |
       cd {{ easybuild_sources_dir }}/l/Lua/lua-{{ easybuild_lua_version }}
       ./configure --with-static=yes --prefix={{ easybuild_software_dir }}/Lua/{{ easybuild_lua_version }} && make && make install
  when: lua_install_from_source|default(false)

#
# Lmod.
#
- name: Check if Lmod is installed and if yes what version
  #
  # Example output:
  # Modules based on Lua: Version 6.5.8  2016-09-03 13:41 -05:00 (CDT)
  #    by Robert McLay mclay@tacc.utexas.edu
  #
  shell: "unset MODULEPATH && . ~/.modulesrc >/dev/null && lmod -v 2>&1 | grep -i version"
  args:
    executable: /bin/bash
    warn: no
  changed_when: false
  failed_when: false
  check_mode: no
  register: lmod_installed_version
- name: Determine if Lmod needs to be (re)installed
  set_fact:
    lmod_install_from_source: true
  when: 'lmod_installed_version|failed or (lmod_installed_version.stdout | regex_replace("^.*Version ([0-9\.]+).*$", "\\1") | version_compare(easybuild_lmod_version, operator="!="))'
- name: Report Lmod status
  debug:
    msg: 'Will install Lmod from source as it is either missing or present in a different version. (Detected {{ lmod_installed_version.stdout | regex_replace("^.*Version ([0-9\.]+).*$", "\\1") }} and need {{ easybuild_lmod_version }}.)'
  when: lmod_install_from_source|default(false)
- name: Download Lmod
  get_url:
    url: "https://github.com/TACC/Lmod/archive/{{ easybuild_lmod_version }}.tar.gz"
    dest: "{{ easybuild_sources_dir }}/l/Lmod/{{ easybuild_lmod_version }}.tar.gz"
    checksum: 'md5:a2ea3c83f08d4175f08f84ac2a9bd508'
    mode: "{{ MODE_FILES_REGULAR }}"
  when: lmod_install_from_source|default(false)
- name: Decompress Lmod
  unarchive:
    src:  "{{ easybuild_sources_dir }}/l/Lmod/{{ easybuild_lmod_version }}.tar.gz"
    dest: "{{ easybuild_sources_dir }}/l/Lmod/"
    copy: no
  when: lmod_install_from_source|default(false)
- name: Compile and install Lmod
  shell: >
         export PATH={{ easybuild_software_dir }}/Lua/{{ easybuild_lua_version }}/bin:$PATH;
         cd {{ easybuild_sources_dir }}/l/Lmod/Lmod-{{ easybuild_lmod_version }};
         ./configure --prefix={{ easybuild_software_dir }} --with-lua-include={{ easybuild_software_dir }}/Lua/{{ easybuild_lua_version }}/include
                     --with-mpathSearch=YES
                     --with-caseIndependentSorting=YES
                     && make install
  when: lmod_install_from_source|default(false)

#
# Update environment.
#
- name: Create global modules.bashrc with Lmod and EasyBuild environment config.
  template: src="{{ item.src }}" dest="{{ easybuild_modules_dir }}/{{ item.dest }}" mode="{{ MODE_FILES_EXECUTE }}"
  with_items:
    - src: 'lmodrc.lua'
      dest: '.lmod/lmodrc.lua'
    - src: 'modules.bashrc'
      dest: 'modules.bashrc'
- name: Insert block into ~/.bashrc to append to make sure ~/.modulesrc will be sourced.
  blockinfile:
    dest: "{{ ansible_env.HOME }}/.bashrc"
    block: |
      # Setup environment for Lua and Lmod.
      if [ -f "${HOME}/.modulesrc" ]; then
        . "${HOME}/.modulesrc"
      fi
    marker: "# {mark} ANSIBLE MANAGED BLOCK - lua lmod in path"
    insertafter: EOF
    create: yes

- name: Download EasyBuild bootstrap script
  get_url:
    url: "https://raw.githubusercontent.com/hpcugent/easybuild-framework/develop/easybuild/scripts/bootstrap_eb.py"
    dest: "{{ easybuild_sources_dir }}/e/EasyBuild/bootstrap_eb.py"
    mode: "{{ MODE_FILES_EXECUTE }}"
    #checksum: 'md5:3b9dab8edf5c8e25db8f6e7d33189a4a' We don't care about the version/checksum as the URL above just fetches the latest and greatest.

#
# Ansible doesn't run task in a login shell, so we have to source the EasyBuild config manually.
# We might want to create some abstraction for this.
#
- name: install easybuild
  shell: >
         source {{ easybuild_modules_dir }}/modules.bashrc
         && umask 0002
         && python {{ easybuild_sources_dir }}/e/EasyBuild/bootstrap_eb.py {{ HPC_ENV_PREFIX }}

